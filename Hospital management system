Hospital management system
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Person {
    private String name;
    private int age;
    private String gender;
    private String address;

    public Person(String name, int age, String gender, String address) {
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.address = address;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGender() {
        return gender;
    }

    public String getAddress() {
        return address;
    }
}

class Doctor extends Person {
    private String specialization;
    private String doctorId;

    public Doctor(String name, int age, String gender, String address, String specialization, String doctorId) {
        super(name, age, gender, address);
        this.specialization = specialization;
        this.doctorId = doctorId;
    }

    public String getSpecialization() {
        return specialization;
    }

    public String getDoctorId() {
        return doctorId;
    }
}

class Patient extends Person {
    private String patientId;
    private List<String> appointments;

    public Patient(String name, int age, String gender, String address, String patientId) {
        super(name, age, gender, address);
        this.patientId = patientId;
        this.appointments = new ArrayList<>();
    }

    public String getPatientId() {
        return patientId;
    }

    public List<String> getAppointments() {
        return appointments;
    }

    public void addAppointment(String appointment) {
        appointments.add(appointment);
    }
}

class Hospital {
    private List<Doctor> doctors;
    private List<Patient> patients;

    public Hospital() {
        doctors = new ArrayList<>();
        patients = new ArrayList<>();
    }

    public void addDoctor(Doctor doctor) {
        doctors.add(doctor);
        System.out.println("Doctor added successfully.");
    }

    public void addPatient(Patient patient) {
        patients.add(patient);
        System.out.println("Patient added successfully.");
    }

    public void displayDoctors() {
        if (doctors.isEmpty()) {
            System.out.println("No doctors in the hospital.");
        } else {
            System.out.println("Doctors in the hospital:");
            for (Doctor doctor : doctors) {
                System.out.println("Name: " + doctor.getName());
                System.out.println("Age: " + doctor.getAge());
                System.out.println("Gender: " + doctor.getGender());
                System.out.println("Address: " + doctor.getAddress());
                System.out.println("Specialization: " + doctor.getSpecialization());
                System.out.println("Doctor ID: " + doctor.getDoctorId());
                System.out.println("----------------------");
            }
        }
    }

    public void displayPatients() {
        if (patients.isEmpty()) {
            System.out.println("No patients in the hospital.");
        } else {
            System.out.println("Patients in the hospital:");
            for (Patient patient : patients) {
                System.out.println("Name: " + patient.getName());
                System.out.println("Age: " + patient.getAge());
                System.out.println("Gender: " + patient.getGender());
                System.out.println("Address: " + patient.getAddress());
                System.out.println("Patient ID: " + patient.getPatientId());
                System.out.println("Appointments: " + patient.getAppointments());
                System.out.println("----------------------");
            }
        }
    }

    public void scheduleAppointment(String patientId, String doctorId, String appointment) {
        Patient patient = findPatient(patientId);
        Doctor doctor = findDoctor(doctorId);

        if (patient != null && doctor != null) {
            patient.addAppointment(appointment);
            System.out.println("Appointment scheduled successfully.");
        } else {
            System.out.println("Patient or doctor not found.");
        }
    }

    private Patient findPatient(String patientId) {
        for (Patient patient : patients) {
            if (patient.getPatientId().equals(patientId)) {
                return patient;
            }
        }
        return null;
    }

    private Doctor findDoctor(String doctorId) {
        for (Doctor doctor : doctors) {
            if (doctor.getDoctorId().equals(doctorId)) {
                return doctor;
            }
        }
        return null;
    }
}

public class HospitalManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Hospital hospital = new Hospital();

        boolean exit = false;
        while (!exit) {
            System.out.println("Hospital Management System");
            System.out.println("1. Add Doctor");
            System.out.println("2. Add Patient");
            System.out.println("3. Display Doctors");
            System.out.println("4. Display Patients");
            System.out.println("5. Schedule Appointment");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter doctor name: ");
                    String docName = scanner.nextLine();
                    System.out.print("Enter doctor age: ");
                    int docAge = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter doctor gender: ");
                    String docGender = scanner.nextLine();
                    System.out.print("Enter doctor address: ");
                    String docAddress = scanner.nextLine();
                    System.out.print("Enter doctor specialization: ");
                    String specialization = scanner.nextLine();
                    System.out.print("Enter doctor ID: ");
                    String docId = scanner.nextLine();

                    Doctor doctor = new Doctor(docName, docAge, docGender, docAddress, specialization, docId);
                    hospital.addDoctor(doctor);
                    break;
                case 2:
                    System.out.print("Enter patient name: ");
                    String patName = scanner.nextLine();
                    System.out.print("Enter patient age: ");
                    int patAge = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter patient gender: ");
                    String patGender = scanner.nextLine();
                    System.out.print("Enter patient address: ");
                    String patAddress = scanner.nextLine();
                    System.out.print("Enter patient ID: ");
                    String patId = scanner.nextLine();

                    Patient patient = new Patient(patName, patAge, patGender, patAddress, patId);
                    hospital.addPatient(patient);
                    break;
                case 3:
                    hospital.displayDoctors();
                    break;
                case 4:
                    hospital.displayPatients();
                    break;
                case 5:
                    System.out.print("Enter patient ID: ");
                    String patientId = scanner.nextLine();
                    System.out.print("Enter doctor ID: ");
                    String doctorId = scanner.nextLine();
                    System.out.print("Enter appointment details: ");
                    String appointment = scanner.nextLine();

                    hospital.scheduleAppointment(patientId, doctorId, appointment);
                    break;
                case 6:
                    exit = true;
                    System.out.println("Exiting the system. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }

        scanner.close();
    }
}
